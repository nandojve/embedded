//******************************************************************************
//*
//* XMEGA DES driver assembly source file optimized for size.
//*
//* This file contains the low-level implementations for the
//* XMEGA DES driver optimized for size. It is written for the IAR Assembler.
//*
//* Note on IAR calling convention:
//*      Scratch registers:   R0-R3, R16-R23, R30-R31
//*      Preserved registers: R4-R15, R24-R27
//*      Parameter registers: R16-R23 (1-, 2- or 4-byte alignment)
//*      Return registers:    R16-R19
//*
//* Application note:
//*      AVR1317: Using the XMEGA built in DES accelerator
//*
//* Documentation
//*      For comprehensive code documentation, supported compilers, compiler
//*      settings and supported devices see readme.html
//*
//*      Atmel Corporation: http://www.atmel.com \n
//*      Support email: avr@atmel.com
//*
//* $Revision: 1545 $
//* $Date: 2008-04-21 12:51:10 +0200 (ma, 21 apr 2008) $
//*
//* Copyright (c) 2008, Atmel Corporation All rights reserved.
//*
//* Redistribution and use in source and binary forms, with or without
//* modification, are permitted provided that the following conditions are met:
//*
//* 1. Redistributions of source code must retain the above copyright notice,
//* this list of conditions and the following disclaimer.
//*
//* 2. Redistributions in binary form must reproduce the above copyright notice,
//* this list of conditions and the following disclaimer in the documentation
//* and/or other materials provided with the distribution.
//*
//* 3. The name of ATMEL may not be used to endorse or promote products derived
//* from this software without specific prior written permission.
//*
//* THIS SOFTWARE IS PROVIDED BY ATMEL ``AS IS'' AND ANY EXPRESS OR IMPLIED
//* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
//* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY AND
//* SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT,
//* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
//* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
//* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//******************************************************************************

// ----------
// This routine does a single DES encryption.
//
// Prototype:
//    void DES_Encrypt(uint8_t * plaintext, uint8_t * ciphertext, uint8_t * key);
//
// Input:
//    - R17:R16 - pointer to plaintext buffer.
//    - R19:R18 - pointer to ciphertext buffer.
//    - R21:R20 - pointer to key buffer.
//
// Register usage during DES_Encrypt:
//
// During execution:
//   - R31:R30 (Z) is used for misc memory pointing and is not preserved.
//   - R29:R28 (Y) is IAR's data stack pointer.
//   - R26 contains a variable that is non-zero for doing 3DES, zero for single DES.
//   - R15 - R8 contains current key being processed.
//   - R7  - R0 contains the data (plaintext or ciphertext).
// ----------
MODULE DES_Encrypt
EXTERN DES_INTERNAL_Prolog
EXTERN DES_INTERNAL_Load_Data
EXTERN DES_INTERNAL_DES_Encrypt
EXTERN DES_INTERNAL_Store_Data
EXTERN DES_INTERNAL_Epilog
PUBLIC DES_Encrypt
RSEG CODE
DES_Encrypt:
	rcall	DES_INTERNAL_Prolog
	rcall	DES_INTERNAL_Load_Data

	// Clear R26 register to tell the DES_INTERNAL_DES_Encrypt to do single DES. 
	clr	r26

	rcall	DES_INTERNAL_DES_Encrypt
	rcall	DES_INTERNAL_Store_Data
	rjmp	DES_INTERNAL_Epilog
ENDMOD


// ----------
// This routine does a single DES decryption.
//
// Prototype:
//    void DES_Decrypt(uint8_t * ciphertext, uint8_t * plaintext, uint8_t * key);
//
// Input:
//    - R17:R16 - pointer to ciphertext buffer.
//    - R19:R18 - pointer to plaintext buffer.
//    - R21:R20 - pointer to key buffer.
//
// Register usage during DES_Decrypt:
//
// During execution:
//   - R31:R30 (Z) is used for misc memory pointing and is not preserved.
//   - R29:R28 (Y) is IAR's data stack pointer.
//   - R26 contains a variable that is non-zero for doing 3DES, zero for single DES.
//   - R15 - R8 contains current key being processed.
//   - R7  - R0 contains the data (plaintext or ciphertext).
// ----------
MODULE DES_Decrypt
EXTERN DES_INTERNAL_Prolog
EXTERN DES_INTERNAL_Load_Data
EXTERN DES_INTERNAL_DES_Decrypt
EXTERN DES_INTERNAL_Store_Data
EXTERN DES_INTERNAL_Epilog
PUBLIC DES_Decrypt
RSEG CODE
DES_Decrypt:
	rcall	DES_INTERNAL_Prolog
	rcall	DES_INTERNAL_Load_Data

	// Clear R26 register to tell the DES_INTERNAL_DES_Decrypt to do single DES. 
	clr	r26

	rcall	DES_INTERNAL_DES_Decrypt
	rcall	DES_INTERNAL_Store_Data
	rjmp 	DES_INTERNAL_Epilog
ENDMOD


// ----------
// This routine does a triple DES encryption.
//
// Prototype:
//    void DES_3DES_Encrypt(uint8_t * plaintext, uint8_t * ciphertext, uint8_t * keys);
//
// Input:
//    - R17:R16 - pointer to plaintext buffer.
//    - R19:R18 - pointer to ciphertext buffer.
//    - R21:R20 - pointer to key buffer.
//
// Register usage during DES_3DES_Encrypt:
//
// During execution:
//   - R31:R30 (Z) is used for misc memory pointing and is not preserved.
//   - R29:R28 (Y) is IAR's data stack pointer.
//   - R26 contains a variable that is non-zero for doing 3DES, zero for single DES.
//   - R15 - R8 contains current key being processed.
//   - R7  - R0 contains the data (plaintext or ciphertext).
// ----------
MODULE DES_3DES_Encrypt
EXTERN DES_INTERNAL_Prolog
EXTERN DES_INTERNAL_Load_Data
EXTERN DES_INTERNAL_DES_Encrypt
EXTERN DES_INTERNAL_Store_Data
EXTERN DES_INTERNAL_Epilog
PUBLIC DES_3DES_Encrypt
RSEG CODE
DES_3DES_Encrypt:
	rcall	DES_INTERNAL_Prolog
	rcall	DES_INTERNAL_Load_Data

	// Set R26 register to non-zero to tell the DES_INTERNAL_DES_Encrypt to do triple DES. 
	ser	r26

	rcall	DES_INTERNAL_DES_Encrypt
	rcall	DES_INTERNAL_Store_Data
	rjmp	DES_INTERNAL_Epilog
ENDMOD


// ----------
// This routine does a triple DES decryption.
//
// Prototype:
//    void DES_3DES_Decrypt(uint8_t * ciphertext, uint8_t * plaintext, uint8_t * keys);
//
// Input:
//    - R17:R16 - pointer to ciphertext buffer.
//    - R19:R18 - pointer to plaintext buffer.
//    - R21:R20 - pointer to key buffer.
//
// Register usage during DES_3DES_Decrypt:
//
// During execution:
//   - R31:R30 (Z) is used for misc memory pointing and is not preserved.
//   - R29:R28 (Y) is IAR's data stack pointer.
//   - R26 contains a variable that is non-zero for doing 3DES, zero for single DES.
//   - R15 - R8 contains current key being processed.
//   - R7  - R0 contains the data (plaintext or ciphertext).
// ----------
MODULE DES_3DES_Decrypt
EXTERN DES_INTERNAL_Prolog
EXTERN DES_INTERNAL_Load_Data
EXTERN DES_INTERNAL_DES_Decrypt
EXTERN DES_INTERNAL_Store_Data
EXTERN DES_INTERNAL_Epilog
PUBLIC DES_3DES_Decrypt
RSEG CODE
DES_3DES_Decrypt:
	rcall	DES_INTERNAL_Prolog
	rcall	DES_INTERNAL_Load_Data
	
	// Set R26 register to non-zero to tell the DES_INTERNAL_DES_Decrypt to do triple DES.
	ser	r26

	rcall	DES_INTERNAL_DES_Decrypt
	rcall	DES_INTERNAL_Store_Data
	rjmp	DES_INTERNAL_Epilog
ENDMOD


// ----------
// This routine does cipher block chaining encoding using DES.
// The bool triple_DES decide if single DES or triple DES is used.
// The variable block_length decide the number of blocks encoded.
//
// Prototype:
//    void DES_CBC_Encrypt(uint8_t * plaintext, uint8_t * ciphertext,
//                         uint8_t * keys, uint8_t * init,
//                         bool triple_DES, uint16_t block_length);
//
// Input:
//    - R17:R16 - pointer to plaintext buffer.
//    - R19:R18 - pointer to ciphertext buffer.
//    - R21:R20 - pointer to key buffer.
//    - R23:R22 - pointer to initial vector (IV).
//    - CSTACK  - variable holding triple_DES bool.
//    - CSTACK  - variable holding block_length.
//
// Register usage during DES_CBC_Encrypt:
//
// During execution:
//   - R31:R30 (Z) is used for misc memory pointing and is not preserved.
//   - R29:R28 (Y) is IAR's data stack pointer.
//   - R25:R24 variable holding block_length variable (moved from CSTACK).
//   - R17:R16 points to the current position in the input buffer (plaintext).
//   - R19:R18 points to the current position in the output buffer (ciphertext).
//   - R21:R20 points to the key buffer.
//   - R23:R22 pointer to initial vector (IV).
//   - R26 contains a variable that is non-zero for doing 3DES, zero for single DES.
//   - R15 - R8 contains current key being processed.
//   - R7  - R0 contains the data (plaintext or ciphertext).
// ----------
MODULE DES_CBC_Encrypt
EXTERN DES_INTERNAL_Prolog
EXTERN DES_INTERNAL_Load_Data
EXTERN DES_INTERNAL_Load_Into_R15_R8
EXTERN DES_INTERNAL_XOR_Routine
EXTERN DES_INTERNAL_DES_Encrypt
EXTERN DES_INTERNAL_Store_Data
EXTERN DES_INTERNAL_Epilog
PUBLIC DES_CBC_Encrypt
RSEG CODE
DES_CBC_Encrypt:

	// Load input 3DES bool from data stack.
	ldd	r2, Y+0

	// Load block_length variable from data stack.
	ldd	r0, Y+1
	ldd	r1, Y+2

	rcall	DES_INTERNAL_Prolog

	// Move 3DES and block_length to right registers after they are saved.
	mov	r26, r2
	movw	r24, r0

	rcall	DES_INTERNAL_Load_Data

	// Load the pointer to IV into the Z pointer, and load the IV to R15 - R8
	// to allow for XORing between the data and IV.
	movw	r30, r22
	rcall	DES_INTERNAL_Load_Into_R15_R8

DES_INTERNAL_CBC_Encrypt_Next:
	rcall	DES_INTERNAL_XOR_Routine
	rcall	DES_INTERNAL_DES_Encrypt
	rcall	DES_INTERNAL_Store_Data

	// Subtract one block from the counter for each pass and go to end if zero.
	sbiw	r24, 1
	breq	DES_INTERNAL_CBC_Encrypt_End

	// Load the pointer to data into the Z pointer, and load the data to R15 - R8
	// to allow for XORing between the last cipherblock and data.
	movw	r30, r16
	rcall	DES_INTERNAL_Load_Into_R15_R8
	movw	r16, r30	

	rjmp	DES_INTERNAL_CBC_Encrypt_Next

DES_INTERNAL_CBC_Encrypt_End:
	rjmp	DES_INTERNAL_Epilog
ENDMOD


// ----------
// This routine does cipher block chaining decoding using DES.
// The bool triple_DES decide if single DES or triple DES is used.
// The variable block_length decide the number of blocks encoded.
//
// Prototype:
//    void DES_CBC_Decrypt(uint8_t * ciphertext, uint8_t * plaintext,
//                         uint8_t * keys, uint8_t * init,
//                         bool triple_DES, uint16_t block_length);
//
// Input:
//    - R17:R16 - pointer to ciphertext buffer.
//    - R19:R18 - pointer to plaintext buffer.
//    - R21:R20 - pointer to key buffer.
//    - R23:R22 - pointer to initial vector (IV).
//    - CSTACK  - variable holding triple_DES bool.
//    - CSTACK  - variable holding block_length.
//
// Register usage during DES_CBC_Decrypt:
//
// During execution:
//   - R31:R30 (Z) is used for misc memory pointing and is not preserved.
//   - R29:R28 (Y) is IAR's data stack pointer.
//   - R25:R24 variable holding block_length variable (moved from CSTACK).
//   - R17:R16 points to the current position in the input buffer (ciphertext)
//   - R19:R18 points to the current position in the output buffer (plaintext)
//   - R21:R20 points to the key buffer
//   - R26 contains a variable that is non-zero for doing 3DES, zero for single DES.
//   - R15 - R8 contains current key being processed.
//   - R7  - R0 contains the data (plaintext or ciphertext).
// ----------
MODULE DES_CBC_Decrypt
EXTERN DES_INTERNAL_Prolog
EXTERN DES_INTERNAL_Load_Data
EXTERN DES_INTERNAL_Load_Into_R15_R8
EXTERN DES_INTERNAL_XOR_Routine
EXTERN DES_INTERNAL_DES_Decrypt
EXTERN DES_INTERNAL_Store_Data
EXTERN DES_INTERNAL_Epilog
PUBLIC DES_CBC_Decrypt
RSEG CODE
DES_CBC_Decrypt:
	// Load input 3DES bool from data stack.
	ldd	r2, Y+0

	// Load block_length variable from data stack.
	ldd	r0, Y+1
	ldd	r1, Y+2

	rcall	DES_INTERNAL_Prolog

	// Move 3DES and block_length to right registers after they are saved.
	mov	r26, r2
	movw	r24, r0

	// Load data and decrypt.
	rcall	DES_INTERNAL_Load_Data
	rcall	DES_INTERNAL_DES_Decrypt

	// Load the initial vector into Z pointer and do the first XORing with the IV.
	movw	r30, r22

DES_INTERNAL_CBC_Decrypt_Next:
	rcall	DES_INTERNAL_Load_Into_R15_R8
	rcall	DES_INTERNAL_XOR_Routine
	rcall	DES_INTERNAL_Store_Data

	// Subtract one block from the counter for each pass and go to end if zero.
	sbiw	r24, 1
	breq	DES_INTERNAL_CBC_Decrypt_End

	// Load the next cipher block into R7-R0 and decrypt.
	// The pointer to the ciphers are updated on each load.
	rcall	DES_INTERNAL_Load_Data
	rcall	DES_INTERNAL_DES_Decrypt

	// Move the updated cipher block pointer to Z pointer, and subtract the pointer
	// by 16 to get the previous cipher block to XOR with the decrypted data.
	movw	r30, r16
	sbiw	r30, 16
	rjmp	DES_INTERNAL_CBC_Decrypt_Next

DES_INTERNAL_CBC_Decrypt_End:
	rjmp	DES_INTERNAL_Epilog
ENDMOD


// ----------
// This routine is called by several other routines, and contains common code
// for executing single/triple DES encryption.
//
// Note: The data need to be preloaded and R26 must be set to triple or single DES.
//       This function only load the keys and do the encryption.
//
// Input:
//    - R21:R20 - pointer to key buffer.
//    - R26 - if non-zero, triple DES is performed.
//
// Register usage during DES_Encryption:
//
// During execution:
//   - R31:R30 (Z) is used for misc memory pointing and is not preserved.
//   - R26 contains a variable that is non-zero for doing 3DES, zero for single DES.
//   - R15 - R8 contains current key being processed.
//   - R7  - R0 contains the data (plaintext or ciphertext).
// ----------
MODULE DES_INTERNAL_DES_Encrypt
EXTERN DES_INTERNAL_Load_Into_R15_R8
EXTERN DES_INTERNAL_DES_Routine
PUBLIC DES_INTERNAL_DES_Encrypt
RSEG CODE
DES_INTERNAL_DES_Encrypt:
	// Load pointer to first key into Z pointer and store the key to R15-R8
	movw	r30, r20
	rcall	DES_INTERNAL_Load_Into_R15_R8

	clh
	rcall	DES_INTERNAL_DES_Routine

	// Test if register is zero, and go to end if single encryption only.
	tst	r26
	breq	DES_INTERNAL_DES_Single_Encrypt

	// Load pointer to second key into Z pointer and store the key to R15-R8
	movw	r30, r20
	adiw	r30, 8
	rcall	DES_INTERNAL_Load_Into_R15_R8

	seh
	rcall	DES_INTERNAL_DES_Routine

	// Load pointer to third key into Z pointer and store the key to R15-R8
	movw	r30, r20
	adiw	r30, 16
	rcall	DES_INTERNAL_Load_Into_R15_R8

	clh
	rcall	DES_INTERNAL_DES_Routine

DES_INTERNAL_DES_Single_Encrypt:
	ret
ENDMOD


// ----------
// This routine is called by several other routines, and contains common code
// for executing single/triple DES decryption.
//
// Note: The data need to be preloaded and R16 must be set to triple or single DES.
//       This function only load the keys and do the decryption.
//
// Input:
//    - R21:R20 - pointer to key buffer.
//    - R26 - if non-zero, triple DES is performed.
//
// Register usage during DES_Decryption:
//
// During execution:
//   - R31:R30 (Z) is used for misc memory pointing and is not preserved.
//   - R26 contains a variable that is non-zero for doing 3DES, zero for single DES.
//   - R15 - R8 contains current key being processed.
//   - R7  - R0 contains the data (plaintext or ciphertext).
// ----------
MODULE DES_INTERNAL_DES_Decrypt
EXTERN DES_INTERNAL_Load_Into_R15_R8
EXTERN DES_INTERNAL_DES_Routine
PUBLIC DES_INTERNAL_DES_Decrypt
RSEG CODE
DES_INTERNAL_DES_Decrypt:
	
	// Test if register is zero. Go to single decryption if zero.
	tst	r26
	breq	DES_INTERNAL_DES_Single_Decrypt

	// Load pointer to third key into Z pointer and store the key to R15-R8
	movw	r30, r20
	adiw	r30, 16
	rcall	DES_INTERNAL_Load_Into_R15_R8

	seh
	rcall	DES_INTERNAL_DES_Routine

	// Load pointer to second key into Z pointer and store the key to R15-R8
	movw	r30, r20
	adiw	r30, 8
	rcall	DES_INTERNAL_Load_Into_R15_R8

	clh
	rcall	DES_INTERNAL_DES_Routine

DES_INTERNAL_DES_Single_Decrypt:

	// Load pointer to first key into Z pointer and store the key to R15-R8
	movw	r30, r20
	rcall	DES_INTERNAL_Load_Into_R15_R8

	seh
	rcall	DES_INTERNAL_DES_Routine

	ret
ENDMOD


// ----------
// This routine is called by several other routines, and contains common code
// for loading data to R7-R0.
//
// Input:
//    - R17:R16 - pointer to input buffer.
//
// Register usage during DES_INTERNAL_Load_Data:
//
// During execution:
//   - R31:R30 (Z) is used for misc memory pointing and is not preserved.
//   - R7 - R0 contains the data (plaintext or ciphertext)
//
// Returns:
//     R17:R16 - updated input pointer.
// ----------
MODULE DES_INTERNAL_Load_Data
PUBLIC DES_INTERNAL_Load_Data
RSEG CODE
DES_INTERNAL_Load_Data:
	movw	r30, r16
	ld	r7, Z+
	ld	r6, Z+
	ld	r5, Z+
	ld	r4, Z+
	ld	r3, Z+
	ld	r2, Z+
	ld	r1, Z+
	ld	r0, Z+
	movw	r16, r30
	ret
ENDMOD


// ----------
// This routine is called by several other routines, and contains common code
// for loading data to R15-R8.
//
// Input:
//    - R31:R30 - pointer to data buffer.
//
// Register usage during DES_INTERNAL_Load_Into_R15_R8:
//
// During execution:
//   - R31:R30 (Z) is used for misc memory pointing and is not preserved.
//   - R15 - R8 contains the data (plaintext or ciphertext)
// ----------
MODULE DES_INTERNAL_Load_Into_R15_R8
PUBLIC DES_INTERNAL_Load_Into_R15_R8
RSEG CODE
DES_INTERNAL_Load_Into_R15_R8:
	ld	r15, Z+
	ld	r14, Z+
	ld	r13, Z+
	ld	r12, Z+
	ld	r11, Z+
	ld	r10, Z+
	ld	r9,  Z+
	ld	r8,  Z+
	ret
ENDMOD


// ----------
// This routine is called by several other routines, and contains common code
// to XOR two 64 bits values.
//
// Input:
//     R15 - R8 - 64 bits value.
//     R7  - R0 - 64 bits value.
//
// Returns:
//     R7  - R0 - 64 bits xored value.
// ----------
MODULE DES_INTERNAL_XOR_Routine
PUBLIC DES_INTERNAL_XOR_Routine
RSEG CODE
DES_INTERNAL_XOR_Routine:
	eor	r7, r15
	eor	r6, r14
	eor	r5, r13
	eor	r4, r12
	eor	r3, r11
	eor	r2, r10
	eor	r1,  r9
	eor	r0,  r8
	ret		
ENDMOD


// ----------
// This routine is called by several other routines, and contains common code
// for storing data located in register 7 to 0 to memory pointed to by Z.
//
// Input:
//     R19:R18 - pointer to ouput memory.
//
// Registers used during execution:
//     R31:R30 - Z pointer is used, and not preserved.
//
// Returns:
//     R19:R18 - updated output pointer.
// ----------
MODULE DES_INTERNAL_Store_Data
PUBLIC DES_INTERNAL_Store_Data
RSEG CODE
DES_INTERNAL_Store_Data:
	movw	r30, r18
	st	Z+,  r7
	st	Z+,  r6
	st	Z+,  r5
	st	Z+,  r4
	st	Z+,  r3
	st	Z+,  r2
	st	Z+,  r1
	st	Z+,  r0
	movw	r18, r30
	ret
ENDMOD


// ----------
// This routine is called by several other routines, and contains common code
// doing the DES encryption/decryption.
//
// Input:
//     R15 - R8 - 64 bits key.
//     R7  - R0 - 64 bits plaintext/ciphertext.
//
// Returns:
//     R7 -  R0 - 64 bits ciphertext/plaintext.
//     R8 - R15 - 64 bits key.
// ----------
MODULE DES_INTERNAL_DES_Routine
PUBLIC DES_INTERNAL_DES_Routine
RSEG CODE
DES_INTERNAL_DES_Routine:
	des	0
	des	1
	des	2
	des	3
	des	4
	des	5
	des	6
	des	7
	des	8
	des	9
	des	10
	des	11
	des	12
	des	13
	des	14
	des	15
	ret
ENDMOD


// ----------
// This routine is called by several other routines, and contains common code
// for preserving register defined in IAR.
//
// Registers 4 to 15 and 24 to 27 are to be preserved according
// to IAR calling convention. Therefore we store most of these
// registers on the data stack (pointed to by register pair Y).
//
// Input:
//     R29:R28 - IAR CSTACK.
//
// Returns:
//     R29:R28 - Updated IAR CSTACK.
// ----------
MODULE DES_INTERNAL_Prolog
PUBLIC DES_INTERNAL_Prolog
RSEG CODE
DES_INTERNAL_Prolog:
	st	-Y, R27
	st	-Y, R26
	st	-Y, R25
	st	-Y, R24
	st	-Y, R15
	st	-Y, R14
	st	-Y, R13
	st	-Y, R12
	st	-Y, R11
	st	-Y, R10
	st	-Y, R9
	st	-Y, R8
	st	-Y, R7
	st	-Y, R6
	st	-Y, R5
	st	-Y, R4
	ret
ENDMOD


// ----------
// This routine is called by several other routines, and contains common code
// for restoring register that must be preserved during a function call.
//
// Before exiting, we need to restore the registers previously
// stored on the data stack.
//
// Input:
//     R29:R28 - IAR CSTACK.
//
// Returns:
//     R29:R28 - Updated IAR CSTACK.
// ----------
MODULE DES_INTERNAL_Epilog
PUBLIC DES_INTERNAL_Epilog
RSEG CODE
DES_INTERNAL_Epilog:
	ld	r4,  Y+
	ld	r5,  Y+
	ld	r6,  Y+
	ld	r7,  Y+
	ld	r8,  Y+
	ld	r9,  Y+
	ld	r10, Y+
	ld	r11, Y+
	ld	r12, Y+
	ld	r13, Y+
	ld	r14, Y+
	ld	r15, Y+
	ld	r24, Y+
	ld	r25, Y+
	ld	r26, Y+
	ld	r27, Y+
	ret
ENDMOD

END
